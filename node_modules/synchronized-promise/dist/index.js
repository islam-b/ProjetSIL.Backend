"use strict";

/* 10 seconds */
var DEFAULT_TIMEOUTS = 10 * 1000;
/**
 * @param {Function} func Promise-base function that want to be transformed
 * @param {Object} options Additional options
 * @param {number} options.timeouts Function call timeouts
 * @returns {Function}
 */

function sp(func) {
  var _this = this;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return function () {
    var promiseError, promiseValue;
    var hasError = false;
    var timeouts = options.timeouts || DEFAULT_TIMEOUTS;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    func.apply(_this, args).then(function (value) {
      promiseValue = value;
    }).catch(function (e) {
      promiseError = e;
      hasError = true;
    });
    var waitUntil = new Date(new Date().getTime() + timeouts);

    while (waitUntil > new Date() && typeof promiseError === 'undefined') {
      require('deasync').sleep(100);

      if (promiseValue) {
        return promiseValue;
      }
    }

    if (hasError) {
      throw promiseError;
    } else {
      throw new Error(`${func.name} called timeout`);
    }
  };
}

module.exports = sp;